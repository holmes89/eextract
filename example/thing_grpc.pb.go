// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: thing.proto

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ThingService_ListThings_FullMethodName = "/ThingService/ListThings"
	ThingService_GetThing_FullMethodName   = "/ThingService/GetThing"
)

// ThingServiceClient is the client API for ThingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThingServiceClient interface {
	ListThings(ctx context.Context, in *ThingListRequest, opts ...grpc.CallOption) (*ThingListResponse, error)
	GetThing(ctx context.Context, in *ThingGetRequest, opts ...grpc.CallOption) (*Thing, error)
}

type thingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThingServiceClient(cc grpc.ClientConnInterface) ThingServiceClient {
	return &thingServiceClient{cc}
}

func (c *thingServiceClient) ListThings(ctx context.Context, in *ThingListRequest, opts ...grpc.CallOption) (*ThingListResponse, error) {
	out := new(ThingListResponse)
	err := c.cc.Invoke(ctx, ThingService_ListThings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingServiceClient) GetThing(ctx context.Context, in *ThingGetRequest, opts ...grpc.CallOption) (*Thing, error) {
	out := new(Thing)
	err := c.cc.Invoke(ctx, ThingService_GetThing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThingServiceServer is the server API for ThingService service.
// All implementations must embed UnimplementedThingServiceServer
// for forward compatibility
type ThingServiceServer interface {
	ListThings(context.Context, *ThingListRequest) (*ThingListResponse, error)
	GetThing(context.Context, *ThingGetRequest) (*Thing, error)
	mustEmbedUnimplementedThingServiceServer()
}

// UnimplementedThingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThingServiceServer struct {
}

func (UnimplementedThingServiceServer) ListThings(context.Context, *ThingListRequest) (*ThingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThings not implemented")
}
func (UnimplementedThingServiceServer) GetThing(context.Context, *ThingGetRequest) (*Thing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThing not implemented")
}
func (UnimplementedThingServiceServer) mustEmbedUnimplementedThingServiceServer() {}

// UnsafeThingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThingServiceServer will
// result in compilation errors.
type UnsafeThingServiceServer interface {
	mustEmbedUnimplementedThingServiceServer()
}

func RegisterThingServiceServer(s grpc.ServiceRegistrar, srv ThingServiceServer) {
	s.RegisterService(&ThingService_ServiceDesc, srv)
}

func _ThingService_ListThings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingServiceServer).ListThings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThingService_ListThings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingServiceServer).ListThings(ctx, req.(*ThingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingService_GetThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThingGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingServiceServer).GetThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThingService_GetThing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingServiceServer).GetThing(ctx, req.(*ThingGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThingService_ServiceDesc is the grpc.ServiceDesc for ThingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ThingService",
	HandlerType: (*ThingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListThings",
			Handler:    _ThingService_ListThings_Handler,
		},
		{
			MethodName: "GetThing",
			Handler:    _ThingService_GetThing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thing.proto",
}
